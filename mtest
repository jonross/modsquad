#!/bin/sh
#
# The test suite uses m4 to emit a shell script that verifies sample
# command output against expected results on stdout and stderr.

(
m4 -P <<\!
(

m4_changequote(`<<', `>>')

cleanup() {
    rm -f t_std{out,err}_{expected,actual}
}

trap cleanup 0
nfailures=0

# The 'test' macro has five arguments:
#   test name
#   tl options
#   stdin
#   expected stdout
#   expected stderr

m4_define(<<test>>, <<
echo '$4\c' | sed 1d >t_stdout_expected
echo '$5\c' | sed 1d >t_stderr_expected
echo '$3\c' | sed 1d | ./m6 $2 >t_stdout_actual 2>t_stderr_actual
if [[ "$(cat t_stdout_actual)" != "$(cat t_stdout_expected)" ]]; then
    echo "Test '$1' failed, stdouts differ"
    diff t_stdout_expected t_stdout_actual
    nfailures=$(( $nfailures + 1 ))
fi
if [[ "$(cat t_stderr_actual)" != "$(cat t_stderr_expected)" ]]; then
    echo "Test '$1' failed, stderrs differ"
    diff t_stderr_expected t_stderr_actual
    nfailures=$(( $nfailures + 1 ))
fi
>>)

test(<<Pass-thru>>, <<>>, ps, ps, <<>>)

m4_include(<<tests/inputs.m4>>)

m4_include(<<tests/head.m4>>)
m4_include(<<tests/headtail.m4>>)
m4_include(<<tests/keep.m4>>)
m4_include(<<tests/tail.m4>>)

if [[ $nfailures > 0 ]]; then
    exit 1
else
    exit 0
fi

)
!
) | sh

