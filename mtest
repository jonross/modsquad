#!/bin/sh
#
# The test suite uses m4 to emit a shell script that verifies sample
# command output against expected results on stdout and stderr.

(
m4 -P <<\!
(

m4_changequote(`<<', `>>')

cleanup() {
    rm -f t_std{out,err}_{expected,actual}
}

trap cleanup 0
nfailures=0

# The 'test' macro has five arguments:
#   test name
#   tl options
#   stdin
#   expected stdout
#   expected stderr

m4_define(<<test>>, <<
echo '$4\c' | sed 1d >t_stdout_expected
echo '$5\c' | sed 1d >t_stderr_expected
echo '$3\c' | sed 1d | ./m6 $2 >t_stdout_actual 2>t_stderr_actual
if [[ "$(cat t_stdout_actual)" != "$(cat t_stdout_expected)" ]]; then
    echo "Test '$1' failed, stdouts differ"
    diff t_stdout_expected t_stdout_actual
    nfailures=$(( $nfailures + 1 ))
fi
if [[ "$(cat t_stderr_actual)" != "$(cat t_stderr_expected)" ]]; then
    echo "Test '$1' failed, stderrs differ"
    diff t_stderr_expected t_stderr_actual
    nfailures=$(( $nfailures + 1 ))
fi
>>)

#####  sample inputs  ##############################################################################

m4_define(<<ps>>, <<
UID   PID  PPID   C STIME   TTY           TIME CMD
    0     1     0   0 22Oct14 ??        25:02.89 /sbin/launchd
    0    11     1   0 22Oct14 ??         0:12.72 /usr/libexec/UserEventAgent (System)
    0    12     1   0 22Oct14 ??         0:26.80 /usr/libexec/kextd
    0    14     1   0 22Oct14 ??         6:27.11 /usr/sbin/notifyd
    0    15     1   0 22Oct14 ??         1:36.96 /usr/sbin/securityd -i
    0    16     1   0 22Oct14 ??         0:09.88 /usr/sbin/diskarbitrationd
    0    17     1   0 22Oct14 ??        11:31.90 /usr/libexec/configd
    0    18     1   0 22Oct14 ??         3:01.72 /System/Library/CoreServices/powerd.bundle/powerd
    0    19     1   0 22Oct14 ??         0:27.40 /usr/sbin/syslogd
>>)

m4_define(<<ls1>>, <<
[
bash
cat
chmod
cp
csh
date
dd
df
domainname
echo
ed
expr
gotour
hostname
kill
ksh
launchctl
link
ln
mkdir
mv
pax
pwd
rcp
rm
rmdir
sh
sleep
stty
sync
tcsh
unlink
wait4path
zsh
>>)

####################################################################################################

test(<<Pass-thru>>, <<>>, ps, ps, <<>>)

####################################################################################################

test(<<missing head arg>>, <<head>>, ps, <<>>, <<
Missing argument, expected number of lines
>>)

test(<<bad head arg>>, <<head a>>, ps, <<>>, <<
Expected number of lines but got: a
>>)

test(<<head 0>>, <<head 0>>, ps, <<
>>, <<>>)

test(<<head 3>>, <<head 3>>, ps, <<
UID   PID  PPID   C STIME   TTY           TIME CMD
    0     1     0   0 22Oct14 ??        25:02.89 /sbin/launchd
    0    11     1   0 22Oct14 ??         0:12.72 /usr/libexec/UserEventAgent (System)
>>, <<>>)

####################################################################################################

test(<<headtail under 10 lines>>, <<headtail>>, m4_substr(ls1,0,30), <<
[
bash
cat
chmod
cp
csh
date
>>, <<>>)

test(<<headtail under 20 lines>>, <<headtail>>, m4_substr(ls1,0,60), <<
[
bash
cat
chmod
cp
csh
date
dd
df
domainname
--
echo
ed
expr
>>, <<>>)

test(<<headtail over 20 lines>>, <<headtail>>, ls1, <<
[
bash
cat
chmod
cp
csh
date
dd
df
domainname
--
rm
rmdir
sh
sleep
stty
sync
tcsh
unlink
wait4path
zsh
>>, <<>>)

####################################################################################################

test(<<missing keep arg>>, <<keep>>, ps, <<>>, <<
Missing argument, expected column expression
>>)

test(<<bad keep arg>>, <<keep x>>, ps, <<>>, <<
Bad column expression: x
>>)

test(<<keep 2>>, <<keep 2>>, ps, <<
PID
1
11
12
14
15
16
17
18
19
>>, <<>>)

####################################################################################################

test(<<missing tail arg>>, <<tail>>, ps, <<>>, <<
Missing argument, expected number of lines
>>)

test(<<bad tail arg>>, <<tail a>>, ps, <<>>, <<
Expected number of lines but got: a
>>)

test(<<tail 0>>, <<tail 0>>, ps, <<
>>, <<>>)

test(<<tail 3>>, <<tail 3>>, ps, <<
    0    17     1   0 22Oct14 ??        11:31.90 /usr/libexec/configd
    0    18     1   0 22Oct14 ??         3:01.72 /System/Library/CoreServices/powerd.bundle/powerd
    0    19     1   0 22Oct14 ??         0:27.40 /usr/sbin/syslogd
>>, <<>>)

####################################################################################################

if [[ $nfailures > 0 ]]; then
    exit 1
else
    exit 0
fi

)
!
) | sh

